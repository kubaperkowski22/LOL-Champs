// Generated by Dagger (https://dagger.dev).
package com.ready.lolchamps;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.ready.lolchamps.db.AppDatabase;
import com.ready.lolchamps.db.ChampionDao;
import com.ready.lolchamps.db.ChampionInfoDao;
import com.ready.lolchamps.db.ImageTypeConverter;
import com.ready.lolchamps.db.PassiveTypeConverter;
import com.ready.lolchamps.db.SkinTypeConverter;
import com.ready.lolchamps.db.SpellTypeConverter;
import com.ready.lolchamps.db.StringListTypeConverter;
import com.ready.lolchamps.di.DBModule;
import com.ready.lolchamps.di.DBModule_ProvideAppDatabaseFactory;
import com.ready.lolchamps.di.DBModule_ProvideChampionDaoFactory;
import com.ready.lolchamps.di.DBModule_ProvideChampionInfoDaoFactory;
import com.ready.lolchamps.di.DBModule_ProvideImageTypeConverterFactory;
import com.ready.lolchamps.di.DBModule_ProvideMoshiFactory;
import com.ready.lolchamps.di.DBModule_ProvidePassiveTypeConverterFactory;
import com.ready.lolchamps.di.DBModule_ProvideSkinTypeConverterFactory;
import com.ready.lolchamps.di.DBModule_ProvideSpellTypeConverterFactory;
import com.ready.lolchamps.di.DBModule_ProvideStringListTypeConverterFactory;
import com.ready.lolchamps.di.NetworkModule;
import com.ready.lolchamps.di.NetworkModule_ProvideChampionInfoServiceFactory;
import com.ready.lolchamps.di.NetworkModule_ProvideChampionServiceFactory;
import com.ready.lolchamps.di.NetworkModule_ProvideOkHttpClientFactory;
import com.ready.lolchamps.di.NetworkModule_ProvideRequestDebugInterceptorFactory;
import com.ready.lolchamps.di.NetworkModule_ProvideRetrofitFactory;
import com.ready.lolchamps.network.ChampionInfoService;
import com.ready.lolchamps.network.ChampionService;
import com.ready.lolchamps.network.RequestDebugInterceptor;
import com.ready.lolchamps.repository.DetailRepository;
import com.ready.lolchamps.repository.DetailRepositoryImpl;
import com.ready.lolchamps.repository.MainRepository;
import com.ready.lolchamps.repository.MainRepositoryImpl;
import com.ready.lolchamps.ui.detail.DetailActivity;
import com.ready.lolchamps.ui.detail.DetailViewModel;
import com.ready.lolchamps.ui.detail.DetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.ready.lolchamps.ui.main.MainActivity;
import com.ready.lolchamps.ui.main.MainViewModel;
import com.ready.lolchamps.ui.main.MainViewModel_HiltModules_KeyModule_ProvideFactory;
import com.squareup.moshi.Moshi;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerLolChampsApplication_HiltComponents_SingletonC extends LolChampsApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<RequestDebugInterceptor> provideRequestDebugInterceptorProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<ChampionInfoService> provideChampionInfoServiceProvider;

  private Provider<Moshi> provideMoshiProvider;

  private Provider<ImageTypeConverter> provideImageTypeConverterProvider;

  private Provider<StringListTypeConverter> provideStringListTypeConverterProvider;

  private Provider<SkinTypeConverter> provideSkinTypeConverterProvider;

  private Provider<SpellTypeConverter> provideSpellTypeConverterProvider;

  private Provider<PassiveTypeConverter> providePassiveTypeConverterProvider;

  private Provider<AppDatabase> provideAppDatabaseProvider;

  private Provider<ChampionInfoDao> provideChampionInfoDaoProvider;

  private Provider<DetailRepositoryImpl> detailRepositoryImplProvider;

  private Provider<DetailRepository> provideDetailRepositoryProvider;

  private Provider<ChampionService> provideChampionServiceProvider;

  private Provider<ChampionDao> provideChampionDaoProvider;

  private Provider<MainRepositoryImpl> mainRepositoryImplProvider;

  private Provider<MainRepository> provideMainRepositoryProvider;

  private DaggerLolChampsApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    initialize(applicationContextModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private OkHttpClient okHttpClient() {
    return NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(provideRequestDebugInterceptorProvider.get());
  }

  private Retrofit retrofit() {
    return NetworkModule_ProvideRetrofitFactory.provideRetrofit(provideOkHttpClientProvider.get());
  }

  private ChampionInfoService championInfoService() {
    return NetworkModule_ProvideChampionInfoServiceFactory.provideChampionInfoService(provideRetrofitProvider.get());
  }

  private ImageTypeConverter imageTypeConverter() {
    return DBModule_ProvideImageTypeConverterFactory.provideImageTypeConverter(provideMoshiProvider.get());
  }

  private StringListTypeConverter stringListTypeConverter() {
    return DBModule_ProvideStringListTypeConverterFactory.provideStringListTypeConverter(provideMoshiProvider.get());
  }

  private SkinTypeConverter skinTypeConverter() {
    return DBModule_ProvideSkinTypeConverterFactory.provideSkinTypeConverter(provideMoshiProvider.get());
  }

  private SpellTypeConverter spellTypeConverter() {
    return DBModule_ProvideSpellTypeConverterFactory.provideSpellTypeConverter(provideMoshiProvider.get());
  }

  private PassiveTypeConverter passiveTypeConverter() {
    return DBModule_ProvidePassiveTypeConverterFactory.providePassiveTypeConverter(provideMoshiProvider.get());
  }

  private AppDatabase appDatabase() {
    return DBModule_ProvideAppDatabaseFactory.provideAppDatabase(ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule), provideImageTypeConverterProvider.get(), provideStringListTypeConverterProvider.get(), provideSkinTypeConverterProvider.get(), provideSpellTypeConverterProvider.get(), providePassiveTypeConverterProvider.get());
  }

  private ChampionInfoDao championInfoDao() {
    return DBModule_ProvideChampionInfoDaoFactory.provideChampionInfoDao(provideAppDatabaseProvider.get());
  }

  private DetailRepositoryImpl detailRepositoryImpl() {
    return new DetailRepositoryImpl(provideChampionInfoServiceProvider.get(), provideChampionInfoDaoProvider.get());
  }

  private ChampionService championService() {
    return NetworkModule_ProvideChampionServiceFactory.provideChampionService(provideRetrofitProvider.get());
  }

  private ChampionDao championDao() {
    return DBModule_ProvideChampionDaoFactory.provideChampionDao(provideAppDatabaseProvider.get());
  }

  private MainRepositoryImpl mainRepositoryImpl() {
    return new MainRepositoryImpl(provideChampionServiceProvider.get(), provideChampionDaoProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam) {
    this.provideRequestDebugInterceptorProvider = DoubleCheck.provider(new SwitchingProvider<RequestDebugInterceptor>(singletonC, 4));
    this.provideOkHttpClientProvider = DoubleCheck.provider(new SwitchingProvider<OkHttpClient>(singletonC, 3));
    this.provideRetrofitProvider = DoubleCheck.provider(new SwitchingProvider<Retrofit>(singletonC, 2));
    this.provideChampionInfoServiceProvider = DoubleCheck.provider(new SwitchingProvider<ChampionInfoService>(singletonC, 1));
    this.provideMoshiProvider = DoubleCheck.provider(new SwitchingProvider<Moshi>(singletonC, 8));
    this.provideImageTypeConverterProvider = DoubleCheck.provider(new SwitchingProvider<ImageTypeConverter>(singletonC, 7));
    this.provideStringListTypeConverterProvider = DoubleCheck.provider(new SwitchingProvider<StringListTypeConverter>(singletonC, 9));
    this.provideSkinTypeConverterProvider = DoubleCheck.provider(new SwitchingProvider<SkinTypeConverter>(singletonC, 10));
    this.provideSpellTypeConverterProvider = DoubleCheck.provider(new SwitchingProvider<SpellTypeConverter>(singletonC, 11));
    this.providePassiveTypeConverterProvider = DoubleCheck.provider(new SwitchingProvider<PassiveTypeConverter>(singletonC, 12));
    this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<AppDatabase>(singletonC, 6));
    this.provideChampionInfoDaoProvider = DoubleCheck.provider(new SwitchingProvider<ChampionInfoDao>(singletonC, 5));
    this.detailRepositoryImplProvider = new SwitchingProvider<>(singletonC, 0);
    this.provideDetailRepositoryProvider = DoubleCheck.provider((Provider) detailRepositoryImplProvider);
    this.provideChampionServiceProvider = DoubleCheck.provider(new SwitchingProvider<ChampionService>(singletonC, 14));
    this.provideChampionDaoProvider = DoubleCheck.provider(new SwitchingProvider<ChampionDao>(singletonC, 15));
    this.mainRepositoryImplProvider = new SwitchingProvider<>(singletonC, 13);
    this.provideMainRepositoryProvider = DoubleCheck.provider((Provider) mainRepositoryImplProvider);
  }

  @Override
  public void injectLolChampsApplication(LolChampsApplication lolChampsApplication) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder dBModule(DBModule dBModule) {
      Preconditions.checkNotNull(dBModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder networkModule(NetworkModule networkModule) {
      Preconditions.checkNotNull(networkModule);
      return this;
    }

    public LolChampsApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      return new DaggerLolChampsApplication_HiltComponents_SingletonC(applicationContextModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements LolChampsApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(
        DaggerLolChampsApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public LolChampsApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements LolChampsApplication_HiltComponents.ActivityC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public LolChampsApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements LolChampsApplication_HiltComponents.FragmentC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public LolChampsApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements LolChampsApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(
        DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public LolChampsApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements LolChampsApplication_HiltComponents.ViewC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public LolChampsApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements LolChampsApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public LolChampsApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements LolChampsApplication_HiltComponents.ServiceC.Builder {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public LolChampsApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends LolChampsApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends LolChampsApplication_HiltComponents.FragmentC {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends LolChampsApplication_HiltComponents.ViewC {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends LolChampsApplication_HiltComponents.ActivityC {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectDetailActivity(DetailActivity detailActivity) {
    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(2).add(DetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MainViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends LolChampsApplication_HiltComponents.ViewModelC {
    private final SavedStateHandle savedStateHandle;

    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<DetailViewModel> detailViewModelProvider;

    private Provider<MainViewModel> mainViewModelProvider;

    private ViewModelCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.savedStateHandle = savedStateHandleParam;
      initialize(savedStateHandleParam);

    }

    private DetailViewModel detailViewModel() {
      return new DetailViewModel(singletonC.provideDetailRepositoryProvider.get(), savedStateHandle);
    }

    private MainViewModel mainViewModel() {
      return new MainViewModel(singletonC.provideMainRepositoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.detailViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.mainViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(2).put("com.ready.lolchamps.ui.detail.DetailViewModel", (Provider) detailViewModelProvider).put("com.ready.lolchamps.ui.main.MainViewModel", (Provider) mainViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.ready.lolchamps.ui.detail.DetailViewModel 
          return (T) viewModelCImpl.detailViewModel();

          case 1: // com.ready.lolchamps.ui.main.MainViewModel 
          return (T) viewModelCImpl.mainViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends LolChampsApplication_HiltComponents.ActivityRetainedC {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends LolChampsApplication_HiltComponents.ServiceC {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerLolChampsApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerLolChampsApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.ready.lolchamps.repository.DetailRepositoryImpl 
        return (T) singletonC.detailRepositoryImpl();

        case 1: // com.ready.lolchamps.network.ChampionInfoService 
        return (T) singletonC.championInfoService();

        case 2: // retrofit2.Retrofit 
        return (T) singletonC.retrofit();

        case 3: // okhttp3.OkHttpClient 
        return (T) singletonC.okHttpClient();

        case 4: // com.ready.lolchamps.network.RequestDebugInterceptor 
        return (T) NetworkModule_ProvideRequestDebugInterceptorFactory.provideRequestDebugInterceptor();

        case 5: // com.ready.lolchamps.db.ChampionInfoDao 
        return (T) singletonC.championInfoDao();

        case 6: // com.ready.lolchamps.db.AppDatabase 
        return (T) singletonC.appDatabase();

        case 7: // com.ready.lolchamps.db.ImageTypeConverter 
        return (T) singletonC.imageTypeConverter();

        case 8: // com.squareup.moshi.Moshi 
        return (T) DBModule_ProvideMoshiFactory.provideMoshi();

        case 9: // com.ready.lolchamps.db.StringListTypeConverter 
        return (T) singletonC.stringListTypeConverter();

        case 10: // com.ready.lolchamps.db.SkinTypeConverter 
        return (T) singletonC.skinTypeConverter();

        case 11: // com.ready.lolchamps.db.SpellTypeConverter 
        return (T) singletonC.spellTypeConverter();

        case 12: // com.ready.lolchamps.db.PassiveTypeConverter 
        return (T) singletonC.passiveTypeConverter();

        case 13: // com.ready.lolchamps.repository.MainRepositoryImpl 
        return (T) singletonC.mainRepositoryImpl();

        case 14: // com.ready.lolchamps.network.ChampionService 
        return (T) singletonC.championService();

        case 15: // com.ready.lolchamps.db.ChampionDao 
        return (T) singletonC.championDao();

        default: throw new AssertionError(id);
      }
    }
  }
}
